//LeetCodeÈ¢òÁõÆ: 24_‰∏§‰∏§‰∫§Êç¢ÈìæË°®‰∏≠ÁöÑËäÇÁÇπ

//ÁªôÂÆö‰∏Ä‰∏™ÈìæË°®Ôºå‰∏§‰∏§‰∫§Êç¢ÂÖ∂‰∏≠Áõ∏ÈÇªÁöÑËäÇÁÇπÔºåÂπ∂ËøîÂõû‰∫§Êç¢ÂêéÁöÑÈìæË°®„ÄÇ 
//
// ‰Ω†‰∏çËÉΩÂè™ÊòØÂçïÁ∫ØÁöÑÊîπÂèòËäÇÁÇπÂÜÖÈÉ®ÁöÑÂÄºÔºåËÄåÊòØÈúÄË¶ÅÂÆûÈôÖÁöÑËøõË°åËäÇÁÇπ‰∫§Êç¢„ÄÇ 
//
// 
//
// Á§∫‰æã: 
//
// ÁªôÂÆö 1->2->3->4, ‰Ω†Â∫îËØ•ËøîÂõû 2->1->4->3.
// 
// Related Topics ÈìæË°® 
// üëç 548 üëé 0

package Week_01.Day04;

public class _24_SwapNodesInPairs {
    public static void main(String[] args) {
        _24_SwapNodesInPairs swapNodesInPairs = new _24_SwapNodesInPairs();
        Solution solution = swapNodesInPairs.new Solution();
        ListNode node = swapNodesInPairs.generate();
        swapNodesInPairs.print(node);
        node = solution.swapPairs(node);
        swapNodesInPairs.print(node);

    }

    private void print(ListNode node) {
        System.out.print("[");
        while (node != null) {
            System.out.print(node.val + ",");
            node = node.next;
        }
        System.out.println("]");
    }

    private ListNode generate() {
        ListNode listNode = new ListNode(1);
        ListNode temp = listNode;
        for (int i = 0; i < 7; i++) {
            temp.next = new ListNode(i + 2);
            temp = temp.next;
        }
        return listNode;
    }

    /**
     * Definition for singly-linked list.
     */
    public class ListNode {
        int val;
        ListNode next;

        ListNode(int x) {
            val = x;
        }
    }
    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * ÊñπÊ≥ï‰∫å Ëø≠‰ª£
     * Êó∂Èó¥Â§çÊùÇÂ∫¶ÔºöOÔºànÔºâ
     * Á©∫Èó¥Â§çÊùÇÂ∫¶ÔºöOÔºà1Ôºâ
     */
    class Solution {
        public ListNode swapPairs(ListNode head) {
            if (head == null || head.next == null) return head;
            //Áî®‰∫éÂ≠òÂÇ®Â§¥ËäÇÁÇπ
            ListNode dump = new ListNode(0);
            dump.next = head;
            ListNode preNode = dump;
            //ÁªàÊ≠¢Êù°‰ª∂
            while (head != null && head.next != null) {
                ListNode firstNode = head;
                ListNode secondNode = head.next;

                //ÂºÄÂßã‰∫§Êç¢ËäÇÁÇπ
                preNode.next = secondNode;  //preNodeÊåáÂêëÂâçÈ©±ËäÇÁÇπ
                firstNode.next = secondNode.next;
                secondNode.next = firstNode;

                //ÂàùÂßãÂåñheadÂíåpreNodeËäÇÁÇπ
                preNode = firstNode;
                head = firstNode.next; //jump
            }
            return dump.next;
        }

    }
//    /**
//     * ÊñπÊ≥ï‰∏Ä ÈÄíÂΩí
//     * Êó∂Èó¥Â§çÊùÇÂ∫¶ÔºöOÔºànÔºâ
//     * Á©∫Èó¥Â§çÊùÇÂ∫¶ÔºöOÔºànÔºâ
//     */
//    class Solution {
//        public ListNode swapPairs(ListNode head) {
//            return swapPairsRecur(head);
//        }
//
//        private ListNode swapPairsRecur(ListNode head) {
//            //ÁªàÊ≠¢Êù°‰ª∂
//            if (head == null || head.next == null) {
//                return head;
//            }
//            //swapÁöÑÂ§ÑÁêÜÈ°∫Â∫èÊ∞∏ËøúÊòØ‰æùÊ¨°Â§ÑÁêÜ=Âè≥ËæπÁöÑÂèòÈáè
//            //ÊØèÊ¨°Â§ÑÁêÜ2‰∏™ËäÇÁÇπ,ÊâÄ‰ª•ËøôÈáåË¶ÅÁºìÂ≠ò‰∏Ä‰∏™ËäÇÁÇπ,‰∏îËøõË°åÂèçËΩ¨
//            ListNode nextNode = head.next;
//            //Â≠êÂáΩÊï∞ËøîÂõûhead.next.nextËäÇÁÇπ
//            head.next = swapPairsRecur(nextNode.next);
//            //ËÆ©Á¨¨‰∫å‰∏™ËäÇÁÇπÊåáÂêëÁ¨¨‰∏Ä‰∏™ËäÇÁÇπ
//            nextNode.next = head;
//
//            //ËøîÂõûÂ≠êÈìæË°®
//            return nextNode;
//        }
//    }
//leetcode submit region end(Prohibit modification and deletion)

}